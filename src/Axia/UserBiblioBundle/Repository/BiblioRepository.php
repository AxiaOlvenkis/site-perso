<?php

namespace Axia\UserBiblioBundle\Repository;

/**
 * BiblioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BiblioRepository extends \Doctrine\ORM\EntityRepository
{
    public function findFini($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andwhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }

        $qb->andWhere('e.fini = 1');

        return $qb->getQuery()->getResult();
    }

    public function findEnCours($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andwhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbEpisode');
            $qb->andWhere('b.dernierVu > 0');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbEpisode');
            $qb->andWhere('b.dernierVu > 0');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
            $qb->andWhere('b.dernierVu > 0');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
            $qb->andWhere('b.dernierVu > 0');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
            $qb->andWhere('b.dernierVu > 0');
        }

        return $qb->getQuery()->getResult();
    }

    public function findSaison($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }

        $mois = date('m');
        $annee = date('Y');
        $debut = null;
        $fin = null;
        if(($mois>=1)&&($mois<=3))
        {
            $fin = new \DateTime($annee.'-3-31');
            $debut = new \DateTime($annee.'-1-1');
        }
        else if(($mois>=4)&&($mois<=6))
        {
            $fin = new \DateTime($annee.'-6-31');
            $debut = new \DateTime($annee.'-4-1');
        }
        else if(($mois>=7)&&($mois<=9))
        {
            $fin = new \DateTime($annee.'-9-30');
            $debut = new \DateTime($annee.'-7-1');
        }
        else if(($mois>=10)&&($mois<=12))
        {
            $fin = new \DateTime($annee.'-12-31');
            $debut = new \DateTime($annee.'-10-1');
        }
        $qb->andWhere('e.dateParution >= :debut');
        $qb->setParameter('debut', $debut, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andWhere('e.dateParution <= :fin');
        $qb->setParameter('fin', $fin, \Doctrine\DBAL\Types\Type::DATETIME);



        return $qb->getQuery()->getResult();
    }

    public function findAVoir($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.vu = 0');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }
        elseif($type == 'Film')
        {
            $qb->join('b.film', 'e')->addSelect('e');
        }
        elseif($type == 'Livre')
        {
            $qb->join('b.livre', 'e')->addSelect('e');
            $qb->andWhere('b.possede = 1');
        }

        $date = new \DateTime();
        $qb->andWhere('e.dateParution <= :date');
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andWhere('b.dernierVu = 0');



        return $qb->getQuery()->getResult();
    }

    public function findAVenir($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }
        elseif($type == 'Film')
        {
            $qb->join('b.film', 'e')->addSelect('e');
        }
        elseif($type == 'Jeu')
        {
            $qb->join('b.jeu', 'e')->addSelect('e');
        }
        elseif($type == 'Livre')
        {
            $qb->join('b.livre', 'e')->addSelect('e');
        }

        $date = new \DateTime();
        $qb->andWhere('e.dateParution > :date');
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);



        return $qb->getQuery()->getResult();
    }

    public function findAAcheter($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }

        $date = new \DateTime();
        $qb->andWhere('e.dateParution < :date');
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);

        $qb->andWhere('b.dernierVu <> e.nbTomeVF');



        return $qb->getQuery()->getResult();
    }

    public function findALAffiche($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }
        elseif($type == 'Film')
        {
            $qb->join('b.film', 'e')->addSelect('e');
        }

        $date = new \DateTime();
        $qb->andWhere('e.dateParution < :date');
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andWhere(":date < DATE_ADD(e.dateParution,1, 'month')");
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);



        return $qb->getQuery()->getResult();
    }

    public function findDVD($user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', 'Film');
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        $qb->join('b.film', 'e')->addSelect('e');

        $date = new \DateTime();
        $qb->andwhere("DATE_ADD(e.dateParution,6, 'month') < :date");
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andwhere('b.possede = 0');
        $qb->andWhere($qb->expr()->isNotNull('e.dateParution'));



        return $qb->getQuery()->getResult();
    }

    public function findSouhait($type, $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.possede = 0');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Livre')
        {
            $qb->join('b.livre', 'e')->addSelect('e');
        }
        elseif($type == 'Jeu')
        {
            $qb->join('b.jeu', 'e')->addSelect('e');
        }

        $date = new \DateTime();
        $qb->andWhere('e.dateParution <= :date');
        $qb->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME);



        return $qb->getQuery()->getResult();
    }

    public function findMonthBooks($user)
    {
        $mois = date('m');
        $annee = date('Y');
        $fin = new \DateTime($annee.'-'.$mois.'-31');
        $debut = new \DateTime($annee.'-'.$mois.'-1');

        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andWhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', 'Livre');
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.possede = 0');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        $qb->join('b.livre', 'e')->addSelect('e');

        $qb->andWhere('e.dateParution >= :debut');
        $qb->setParameter('debut', $debut, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andWhere('e.dateParution <= :fin');
        $qb->setParameter('fin', $fin, \Doctrine\DBAL\Types\Type::DATETIME);

        return $qb->getQuery()->getResult();
    }

    public function searchByTitre($type = '', $user, $search)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andwhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Anime')
        {
            $qb->join('b.anime', 'e')->addSelect('e');
        }
        elseif($type == 'Serie')
        {
            $qb->join('b.serie', 'e')->addSelect('e');
        }
        elseif($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
        }
        elseif($type == 'Livre')
        {
            $qb->join('b.livre', 'e')->addSelect('e');
        }
        elseif($type == 'Jeu')
        {
            $qb->join('b.jeu', 'e')->addSelect('e');
        }
        elseif($type == 'Film')
        {
            $qb->join('b.film', 'e')->addSelect('e');
        }

        $search = '%'.$search.'%';
        $qb->andWhere($qb->expr()->like('e.titre', ':search'));
        $qb->setParameter('search', $search);

        return $qb->getQuery()->getResult();
    }

    public function findListeCourse($type = '', $user)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->where('1 = 1');
        $qb->andwhere($qb->expr()->like('b.type', ':type'));
        $qb->setParameter('type', $type);
        $qb->andWhere('b.valide = 1');
        $qb->andWhere('b.user = :user');
        $qb->setParameter('user', $user);

        if($type == 'Manga')
        {
            $qb->join('b.manga', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
        }
        elseif($type == 'Comics')
        {
            $qb->join('b.comics', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
        }
        elseif($type == 'BD')
        {
            $qb->join('b.bd', 'e')->addSelect('e');
            $qb->andWhere('b.dernierVu < e.nbTomeVF');
        }

        return $qb->getQuery()->getResult();
    }
}
